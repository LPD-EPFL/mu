cmake_minimum_required( VERSION 3.9 )
project(crash-consensus-demo CXX)

include( CheckIPOSupported )
check_ipo_supported(RESULT supported OUTPUT error)

if( supported )
  set( CMAKE_INTERPROCEDURAL_OPTIMIZATION ${LTO} )
else()
  message( STATUS "IPO / LTO not supported: <${error}>" )
endif()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  set( COMPILER_VARIANT "clang")
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  set( COMPILER_VARIANT "gcc")
else()
  message(FATAL_ERROR "Only gcc and clang are supported")
endif()

set(FLAGS_EXECUTABLE "${CMAKE_CURRENT_SOURCE_DIR}/../../../conan/exports/compiler-options/compileroptions.py")

exec_program(${FLAGS_EXECUTABLE} ARGS -c ${COMPILER_VARIANT} -o CMAKE_C_FLAGS OUTPUT_VARIABLE CMAKE_C_FLAGS)
exec_program(${FLAGS_EXECUTABLE} ARGS -c ${COMPILER_VARIANT} -o CMAKE_C_FLAGS_RELEASE OUTPUT_VARIABLE CMAKE_C_FLAGS_RELEASE)
exec_program(${FLAGS_EXECUTABLE} ARGS -c ${COMPILER_VARIANT} -o CMAKE_C_FLAGS_DEBUG OUTPUT_VARIABLE CMAKE_C_FLAGS_DEBUG)
exec_program(${FLAGS_EXECUTABLE} ARGS -c ${COMPILER_VARIANT} -o CMAKE_C_FLAGS_RELWITHDEBINFO OUTPUT_VARIABLE CMAKE_C_FLAGS_RELWITHDEBINFO)
exec_program(${FLAGS_EXECUTABLE} ARGS -c ${COMPILER_VARIANT} -o CMAKE_C_FLAGS_MINSIZEREL OUTPUT_VARIABLE CMAKE_C_FLAGS_MINSIZEREL)

exec_program(${FLAGS_EXECUTABLE} ARGS -c ${COMPILER_VARIANT} -o CMAKE_CXX_FLAGS OUTPUT_VARIABLE CMAKE_CXX_FLAGS)
exec_program(${FLAGS_EXECUTABLE} ARGS -c ${COMPILER_VARIANT} -o CMAKE_CXX_FLAGS_RELEASE OUTPUT_VARIABLE CMAKE_CXX_FLAGS_RELEASE)
exec_program(${FLAGS_EXECUTABLE} ARGS -c ${COMPILER_VARIANT} -o CMAKE_CXX_FLAGS_DEBUG OUTPUT_VARIABLE CMAKE_CXX_FLAGS_DEBUG)
exec_program(${FLAGS_EXECUTABLE} ARGS -c ${COMPILER_VARIANT} -o CMAKE_CXX_FLAGS_RELWITHDEBINFO OUTPUT_VARIABLE CMAKE_CXX_FLAGS_RELWITHDEBINFO)
exec_program(${FLAGS_EXECUTABLE} ARGS -c ${COMPILER_VARIANT} -o CMAKE_CXX_FLAGS_MINSIZEREL OUTPUT_VARIABLE CMAKE_CXX_FLAGS_MINSIZEREL)

exec_program(${FLAGS_EXECUTABLE} ARGS -c ${COMPILER_VARIANT} -o CMAKE_EXE_LINKER_FLAGS OUTPUT_VARIABLE CMAKE_EXE_LINKER_FLAGS_EXTRA)
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS_EXTRA}")

MESSAGE( STATUS "CMAKE_C_FLAGS: " ${CMAKE_C_FLAGS} )
MESSAGE( STATUS "CMAKE_CXX_FLAGS: " ${CMAKE_CXX_FLAGS} )
MESSAGE( STATUS "CMAKE_BUILD_TYPE: " ${CMAKE_BUILD_TYPE} )
MESSAGE( STATUS "CMAKE_INTERPROCEDURAL_OPTIMIZATION: " ${CMAKE_INTERPROCEDURAL_OPTIMIZATION} )

set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH}
  ${CMAKE_CURRENT_SOURCE_DIR}/../../libgen/exported)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../../libgen/exported/include)

find_package(Threads REQUIRED)
find_library(CRASH_CONSENSUS_STATIC NAMES libcrashconsensus.a)
find_library(CRASH_CONSENSUS_SHARED NAMES libcrashconsensus.so)

if (CRASH_CONSENSUS_STATIC)
  find_library(IBVERBS_LIB ibverbs)
  if(NOT IBVERBS_LIB)
       message(FATAL_ERROR "ibverbs library not found")
  endif()

  find_library(MEMCACHED_LIB memcached)
  if(NOT MEMCACHED_LIB)
       message(FATAL_ERROR "memcached library not found")
  endif()

  set(CRASH_CONSENSUS ${CRASH_CONSENSUS_STATIC} ${MEMCACHED_LIB} ${IBVERBS_LIB} ${CMAKE_THREAD_LIBS_INIT})
elseif(CRASH_CONSENSUS_SHARED)
  set(CRASH_CONSENSUS ${CRASH_CONSENSUS_SHARED} ${CMAKE_THREAD_LIBS_INIT})
else()
  message(FATAL_ERROR "crash-consensus library not found")
endif()

add_subdirectory(src)
