diff -ur a/market/Market.cpp b/market/Market.cpp
--- a/market/Market.cpp	2020-09-01 13:23:32.965966163 +0200
+++ b/market/Market.cpp	2020-09-01 13:24:07.986354131 +0200
@@ -2,75 +2,14 @@
 // All rights reserved.
 // See the file license.txt for licensing information.
 #include "Market.h"
-#include "Util.h"
 
-#include <functional> 
+#include <functional>
 #include <cctype>
 #include <locale>
-
-namespace {
-    ///////////////////////
-    // depth display helper
-    void displayDepthLevel(std::ostream & out, const liquibook::book::DepthLevel & level)
-    {
-        out << "\tPrice "  <<  level.price();
-        out << " Count: " << level.order_count();
-        out << " Quantity: " << level.aggregate_qty();
-        if(level.is_excess())
-        {
-            out << " EXCESS";
-        }
-        out << " Change id#: " << level.last_change();
-        out << std::endl;
-    }
-
-    void publishDepth(std::ostream & out, const orderentry::BookDepth & depth)
-    {
-        liquibook::book::ChangeId published = depth.last_published_change();
-        bool needTitle = true;
-        // Iterate awkwardly
-        auto pos = depth.bids();
-        auto back = depth.last_bid_level();
-        bool more = true;
-        while(more)
-        {
-            if(pos->aggregate_qty() !=0 && pos->last_change() > published)
-            {
-                if(needTitle)
-                {
-                    out << "\n\tBIDS:\n";
-                    needTitle = false;
-                }
-                displayDepthLevel(out, *pos);
-            }
-            ++pos;
-            more = pos != back;
-        }
-
-        needTitle = true;
-        pos = depth.asks();
-        back = depth.last_ask_level();
-        more = true;
-        while(more)
-        {
-            if(pos->aggregate_qty() !=0 && pos->last_change() > published)
-            {
-                if(needTitle)
-                {
-                    out << "\n\tASKS:\n";
-                    needTitle = false;
-                }
-                displayDepthLevel(out, *pos);
-            }
-            ++pos;
-            more = pos != back;
-        }
-    }
-}
+#include <stdexcept>
 
 namespace orderentry
 {
-
 uint32_t Market::orderIdSeed_ = 0;
 
 Market::Market(std::ostream * out)
@@ -82,459 +21,38 @@
 {
 }
 
-const char * 
-Market::prompt()
-{
-    return "\t(B)uy\n\t(S)ell\n\t(M)odify\n\t(C)ancel\n\t(D)isplay\n";
-}
-
-void 
-Market::help(std::ostream & out)
-{
-    out << "Buy: Create a new Buy order and add it to the book\n"
-        << "Sell: Create a new Sell order and add it to the book\n"
-        << "  Arguments for BUY or SELL\n"
-        << "     <Quantity>\n"
-        << "     <Symbol>\n"
-        << "     <Price> or MARKET\n"
-        << "     AON            (optional)\n"
-        << "     IOC            (optional)\n"
-        << "     STOP <Price>   (optional)\n"
-        << "     ;              end of order\n"
-        << std::endl;
-
-    out << "Modify: Request Modify an existing order\n"
-        << "  Arguments:\n"
-        << "     <order#>\n"
-        << "     PRICE <new price>\n"
-        << "     QUANTITY <new initial quantity>\n"
-        << "     ;              end of modify requet\n"
-        << std::endl;
-
-    out << "Cancel: Request cancel an existing order\n"
-        << "  Arguments:\n"
-        << "     <order#>\n"
-        << "     ;              end of cancel request (optional)\n"
-        << std::endl;
-
-    out << "Display: Display status of an existing order\n"
-        << "  Arguments:\n"
-        << "     +       (enable verbose display)\n"
-        << "     <order#> or <symbol> or \"all\"\n"
-        << std::endl;
-
-}
-
-bool 
-Market::apply(const std::vector<std::string> & tokens)
-{
-    const std::string & command = tokens[0];
-    if(command == "BUY" || command == "B")
-    {
-        return doAdd("BUY", tokens, 1);
-    }
-    if(command == "SELL" || command == "S")
-    {
-        return doAdd("SELL", tokens, 1);
-    }
-    else if (command == "CANCEL" || command == "C")
-    {
-        return doCancel(tokens, 1);
-    }
-    else if(command == "MODIFY" || command == "M")
-    {
-        return doModify(tokens, 1);
-    }
-    else if(command == "DISPLAY" || command == "D")
-    {
-        return doDisplay(tokens, 1);
-    }
-    return false;
-}
-
-
-////////
-// ADD
-bool 
-Market::doAdd(const  std::string & side, const std::vector<std::string> & tokens, size_t pos)
-{
-    //////////////
-    // Quantity
-    liquibook::book::Quantity quantity;
-    std::string qtyStr = nextToken(tokens, pos);
-    if(!qtyStr.empty())
-    {
-        quantity = toUint32(qtyStr);
-    }
-    else
-    {
-        quantity = promptForUint32("Quantity");
-    }
-    // sanity check
-    if(quantity == 0 || quantity > 1000000000)
-    {
-        out() << "--Expecting quantity" << std::endl;
-        return false;
+NamedOrderBook Market::createBook(std::string const &symbol) {
+    if (symbolIsDefined(symbol)) {
+        throw std::runtime_error("Symbol already exists, cannot create book!");
     }
 
-    //////////////
-    // SYMBOL
-    std::string symbol = nextToken(tokens, pos);
-    if(symbol.empty())
-    {
-        symbol = promptForString("Symbol");
-    }
-    if(!symbolIsDefined(symbol))
-    {
-        if(symbol[0] == '+' || symbol[0] == '!')
-        {
-            bool useDepth = symbol[0] == '!';
-            symbol = symbol.substr(1);
-            if(!symbolIsDefined(symbol))
-            {
-                addBook(symbol, useDepth);
-            }
-        }
-        else
-        {
-            std::string bookType;
-            while(bookType != "S" 
-              && bookType != "D" 
-              && bookType != "N")
-            {
-              bookType = promptForString(
-              "New Symbol " + symbol +  
-              ". \nAdd [S]imple book, or [D]epth book, or 'N' to cancel request.\n[SDN}");
-            }
-            if(bookType == "N")
-            {
-                out() << "Request ignored" << std::endl;
-                return false;
-            }
-            bool useDepth = bookType == "D";
-            addBook(symbol, useDepth);
-        }
-    }
+    return std::make_pair(this->addBook(symbol), std::string(symbol));
+}
 
-    ///////////////
-    // PRICE
-    uint32_t price = 0;
-    std::string priceStr = nextToken(tokens, pos);
-    if(!priceStr.empty())
-    {
-        price = stringToPrice(priceStr);
-    }
-    else
-    {
-        price = promptForPrice("Limit Price or MKT");
-    }
-    if(price > 10000000)
-    {
-        out() << "--Expecting price or MARKET" << std::endl;
-        return false;
-    }
+bool Market::placeOrder(NamedOrderBook &namedOrderBook, std::queue<FilledOrder> &notifier, uint64_t req_id, bool buy_otherwise_sell, liquibook::book::Quantity qty, liquibook::book::Price price) {
+    std::string &symbol = namedOrderBook.second;
+    OrderBookPtr &orderBook = namedOrderBook.first;
 
-    //////////////////////////
-    // OPTIONS: AON, IOC STOP
+    // Fixed config
+    liquibook::book::Price stopPrice = 0;
     bool aon = false;
     bool ioc = false;
-    liquibook::book::Price stopPrice = 0;
-    bool go = false;
-    while(!go)
-    {
-        bool prompted = false;
-        bool optionOk = false;
-        std::string option = nextToken(tokens, pos);
-        if(option.empty())
-        {
-            prompted = true;
-            option = promptForString("AON, or IOC, or STOP, or END");
-        }
-        if(option == ";" || option == "E" || option == "END")
-        {
-            go = true;
-            optionOk = true;
-        }
-        else if(option == "A" || option == "AON")
-        {
-            aon = true;
-            optionOk = true;
-        }
-        else if(option == "I" || option == "IOC")
-        {
-            ioc = true;
-            optionOk = true;
-        }
-        else if(option == "S" || option == "STOP")
-        {
-            std::string stopstr = nextToken(tokens, pos);
-
-            if(!stopstr.empty())
-            {
-                stopPrice = stringToPrice(stopstr);
-            } 
-            else
-            {
-                stopPrice = promptForUint32("Stop Price");
-                prompted = true;
-            }
-            optionOk = stopPrice <= 10000000;
-        }
-        if(!optionOk)
-        {
-            out() << "Unknown option " << option << std::endl;
-            if(!prompted)
-            {
-                out() << "--Expecting AON IOC STOP or END" << std::endl;
-                return false;
-            }
-        }
-    }
-
     std::string orderId = std::to_string(++orderIdSeed_);
 
-    OrderPtr order = std::make_shared<Order>(orderId, side == "BUY", quantity, symbol, price, stopPrice, aon, ioc);
-
+    // Config consts
     const liquibook::book::OrderConditions AON(liquibook::book::oc_all_or_none);
     const liquibook::book::OrderConditions IOC(liquibook::book::oc_immediate_or_cancel);
     const liquibook::book::OrderConditions NOC(liquibook::book::oc_no_conditions);
 
-    const liquibook::book::OrderConditions conditions = 
-        (aon ? AON : NOC) | (ioc ? IOC : NOC);
-
+    OrderPtr order = std::make_shared<Order>(orderId, notifier, req_id, buy_otherwise_sell, qty, symbol, price, stopPrice, aon, ioc);
 
-    auto book = findBook(symbol);
-    if(!book)
-    {
-        out() << "--No order book for symbol" << symbol << std::endl;
-        return false;
-    }
+    const liquibook::book::OrderConditions conditions =
+        (aon ? AON : NOC) | (ioc ? IOC : NOC);
 
     order->onSubmitted();
-    out() << "ADDING order:  " << *order << std::endl;
-
-    orders_[orderId] = order;
-    book->add(order, conditions);
-    return true;
-}
+    // out() << "ADDING order:  " << *order << std::endl;
 
-///////////
-// CANCEL
-bool
-Market::doCancel(const std::vector<std::string> & tokens, size_t position)
-{
-    OrderPtr order;
-    OrderBookPtr book;
-    if(!findExistingOrder(tokens, position, order, book))
-    {
-        return false;
-    }
-    out() << "Requesting Cancel: " << *order << std::endl;
-    book->cancel(order);
-    return true;
-}
-
-///////////
-// MODIFY
-bool
-Market::doModify(const std::vector<std::string> & tokens, size_t position)
-{
-    OrderPtr order;
-    OrderBookPtr book;
-    if(!findExistingOrder(tokens, position, order, book))
-    {
-        return false;
-    }
-
-    //////////////
-    // options
-    //////////////////////////
-    // OPTIONS: PRICE (price) ; QUANTITY (delta)
-
-    int32_t quantityChange = liquibook::book::SIZE_UNCHANGED;
-    liquibook::book::Price price = liquibook::book::PRICE_UNCHANGED;
-
-    bool go = false;
-    while(!go)
-    {
-        bool prompted = false;
-        bool optionOk = false;
-        std::string option = nextToken(tokens, position);
-        if(option.empty())
-        {
-            prompted = true;
-            option = promptForString("PRICE, or QUANTITY, or END");
-        }
-        if(option == ";" || option == "E" || option == "END")
-        {
-            go = true;
-            optionOk = true;
-        }
-        else if(option == "P" || option == "PRICE")
-        {
-            uint32_t newPrice = INVALID_UINT32;
-            std::string priceStr = nextToken(tokens, position);
-            if(priceStr.empty())
-            {
-                newPrice = promptForUint32("New Price");
-            }
-            else
-            {
-                newPrice = toUint32(priceStr);
-            }
-
-            if(newPrice > 0 && newPrice != INVALID_UINT32)
-            {
-                price = newPrice;
-                optionOk = true;
-            }
-            else
-            {
-                out() << "Invalid price" << std::endl;
-            }
-        }
-        else if(option == "Q" || option == "QUANTITY")
-        {
-            int32_t qty = INVALID_INT32;
-            std::string qtyStr = nextToken(tokens, position);
-            if(qtyStr.empty())
-            {
-                qty = promptForInt32("Change in quantity");
-            }
-            else
-            {
-                qty = toInt32(qtyStr);
-            }
-            if(qty != INVALID_INT32)
-            {
-                quantityChange = qty;
-                optionOk = true;
-            }
-            else
-            {
-                out() << "Invalid quantity change." << std::endl;
-            }
-        }
-
-        if(!optionOk)
-        {
-            out() << "Unknown or invalid option " << option << std::endl;
-            if(!prompted)
-            {
-                out() << "--Expecting PRICE <price>, or QUANTITY <change>, or  END" << std::endl;
-                return false;
-            }
-        }
-    }
-
-    book->replace(order, quantityChange, price);
-    out() << "Requested Modify" ;
-    if(quantityChange != liquibook::book::SIZE_UNCHANGED)
-    {
-        out() << " QUANTITY  += " << quantityChange;
-    }
-    if(price != liquibook::book::PRICE_UNCHANGED)
-    {
-        out() << " PRICE " << price;
-    }
-    out() << std::endl;
-    return true;
-}
-
-///////////
-// DISPLAY
-bool
-Market::doDisplay(const std::vector<std::string> & tokens, size_t pos)
-{
-    bool verbose = false;
-    // see if first token could be an order id.
-    // todo: handle prompted imput!
-    std::string parameter = nextToken(tokens, pos);
-    if(parameter.empty())
-    {
-        parameter = promptForString("+ or #OrderId or -orderOffset or symbol or \"ALL\"");
-    }
-    else
-    {
-        --pos; // Don't consume this parameter yet.
-    }
-    if(parameter[0] == '+')
-    {
-        verbose = true;
-        if(parameter.length() > 1)
-        {
-            parameter = parameter.substr(1);
-        }
-        else
-        {
-            ++pos; // now we can consume the first parameter (whether or not it's there!)
-            parameter = nextToken(tokens, pos);
-            if(parameter.empty())
-            {
-                parameter = promptForString("#OrderId or -orderOffset or symbol or \"ALL\"");
-            }
-            else
-            {
-                --pos; // Don't consume this parameter yet.
-            }
-        }
-    }
-    if(parameter[0] == '#' || parameter[0] == '-' || isdigit(parameter[0]))
-    {
-        OrderPtr order;
-        OrderBookPtr book;
-        if(findExistingOrder(parameter, order, book))
-        {
-            out() << *order << std::endl;
-            return true;
-        }
-    }
-
-    // Not an order id.  Try for a symbol:
-    std::string symbol = parameter;
-    if(symbolIsDefined(symbol))
-    {
-        for(auto pOrder = orders_.begin(); pOrder != orders_.end(); ++pOrder)
-        {
-            const OrderPtr & order = pOrder->second;
-            if(order->symbol() == symbol)
-            {
-                out() << order->verbose(verbose) << std::endl;
-                order->verbose(false);
-            }
-        }
-        auto book = findBook(symbol);
-        if(!book)
-        {
-            out() << "--No order book for symbol" << symbol << std::endl;
-        }
-        else
-        {
-            book->log(out());
-        }
-        return true;
-    }
-    else if( symbol == "ALL")
-    {
-        for(auto pOrder = orders_.begin(); pOrder != orders_.end(); ++pOrder)
-        {
-            const OrderPtr & order = pOrder->second;
-            out() << order->verbose(verbose) << std::endl;
-            order->verbose(false);
-        }
-
-        for(auto pBook = books_.begin(); pBook != books_.end(); ++pBook)
-        {
-            out() << "Order book for " << pBook->first << std::endl;
-            pBook->second->log(out());
-        }
-        return true;
-    }
-    else
-    {
-        out() << "--Unknown symbol: " << symbol << std::endl;
-    }
-    return false;
+    return orderBook->add(order, conditions);
 }
 
 /////////////////////////////
@@ -548,25 +66,14 @@
 }
 
 OrderBookPtr
-Market::addBook(const std::string & symbol, bool useDepthBook)
+Market::addBook(const std::string & symbol)
 {
     OrderBookPtr result;
-    if(useDepthBook)
-    {
-        out() << "Create new depth order book for " << symbol << std::endl;
-        DepthOrderBookPtr depthBook = std::make_shared<DepthOrderBook>(symbol);
-        depthBook->set_bbo_listener(this);
-        depthBook->set_depth_listener(this);
-        result = depthBook;
-    }
-    else
-    {
-        out() << "Create new order book for " << symbol << std::endl;
-        result = std::make_shared<OrderBook>(symbol);
-    }
+    out() << "Create new order book for " << symbol << std::endl;
+    result = std::make_shared<OrderBook>(symbol);
     result->set_order_listener(this);
-    result->set_trade_listener(this);
-    result->set_order_book_listener(this);
+    // result->set_trade_listener(this);
+    // result->set_order_book_listener(this);
     books_[symbol] = result;
     return result;
 }
@@ -583,98 +90,49 @@
     return result;
 }
 
-bool Market::findExistingOrder(const std::vector<std::string> & tokens, size_t & position, OrderPtr & order, OrderBookPtr & book)
-{
-    ////////////////
-    // Order ID
-    std::string orderId = nextToken(tokens, position);
-    trim(orderId);
-    if(orderId.empty())
-    {
-        orderId = promptForString("Order Id#");
-        trim(orderId);
-    }
-    // discard leading # if any
-    if(orderId[0] == '#')
-    {
-        orderId = orderId.substr(1);
-        trim(orderId);
-        if(orderId.empty())
-        {
-            out() << "--Expecting #orderID" << std::endl;
-            return false;
-        }
-    }
-
-    if(orderId[0] == '-') // relative addressing
-    {
-        int32_t orderOffset = toInt32(orderId);
-        if(orderOffset == INVALID_INT32)
-        {
-            out() << "--Expecting orderID or offset" << std::endl;
-            return false;
-        }
-        uint32_t orderNumber = orderIdSeed_  + 1 + orderOffset;
-        orderId = std::to_string(orderNumber);
-    }
-    return findExistingOrder(orderId, order, book);
-}
-
-bool Market::findExistingOrder(const std::string & orderId, OrderPtr & order, OrderBookPtr & book)
-{
-    auto orderPosition = orders_.find(orderId);
-    if(orderPosition == orders_.end())
-    {
-        out() << "--Can't find OrderID #" << orderId << std::endl;
-        return false;
-    }
-
-    order = orderPosition->second;
-    std::string symbol = order->symbol();
-    book = findBook(symbol);
-    if(!book)
-    {
-        out() << "--No order book for symbol" << symbol << std::endl;
-        return false;
-    }
-    return true;
-}
-
 /////////////////////////////////////
 // Implement OrderListener interface
 
-void 
+void
 Market::on_accept(const OrderPtr& order)
 {
     order->onAccepted();
-    out() << "\tAccepted: " <<*order<< std::endl;
+    // out() << "\tAccepted: " <<*order<< std::endl;
 }
 
-void 
+void
 Market::on_reject(const OrderPtr& order, const char* reason)
 {
+    // This is a terminal state
     order->onRejected(reason);
     out() << "\tRejected: " <<*order<< ' ' << reason << std::endl;
 
 }
 
-void 
-Market::on_fill(const OrderPtr& order, 
-    const OrderPtr& matched_order, 
-    liquibook::book::Quantity fill_qty, 
+void
+Market::on_fill(const OrderPtr& order,
+    const OrderPtr& matched_order,
+    liquibook::book::Quantity fill_qty,
     liquibook::book::Cost fill_cost)
 {
+    // This is a terminal state
     order->onFilled(fill_qty, fill_cost);
     matched_order->onFilled(fill_qty, fill_cost);
-    out() << (order->is_buy() ? "\tBought: " : "\tSold: ") 
-        << fill_qty << " Shares for " << fill_cost << ' ' <<*order<< std::endl;
-    out() << (matched_order->is_buy() ? "\tBought: " : "\tSold: ") 
-        << fill_qty << " Shares for " << fill_cost << ' ' << *matched_order << std::endl;
+
+    order->notifier().emplace(order, fill_qty, fill_cost);
+    matched_order->notifier().emplace(matched_order, fill_qty, fill_cost);
+
+//     out() << (order->is_buy() ? "\tBought: " : "\tSold: ")
+//         << fill_qty << " Shares for " << fill_cost << ' ' <<*order<< std::endl;
+//     out() << (matched_order->is_buy() ? "\tBought: " : "\tSold: ")
+//         << fill_qty << " Shares for " << fill_cost << ' ' << *matched_order << std::endl;
+// }
 }
 
-void 
+void
 Market::on_cancel(const OrderPtr& order)
 {
+    // This is a terminal state
     order->onCancelled();
     out() << "\tCanceled: " << *order<< std::endl;
 }
@@ -685,8 +143,8 @@
     out() << "\tCancel Reject: " <<*order<< ' ' << reason << std::endl;
 }
 
-void Market::on_replace(const OrderPtr& order, 
-    const int32_t& size_delta, 
+void Market::on_replace(const OrderPtr& order,
+    const int32_t& size_delta,
     liquibook::book::Price new_price)
 {
     order->onReplaced(size_delta, new_price);
@@ -702,7 +160,7 @@
     out() <<*order<< std::endl;
 }
 
-void 
+void
 Market::on_replace_reject(const OrderPtr& order, const char* reason)
 {
     order->onReplaceRejected(reason);
@@ -712,9 +170,9 @@
 ////////////////////////////////////
 // Implement TradeListener interface
 
-void 
-Market::on_trade(const OrderBook* book, 
-    liquibook::book::Quantity qty, 
+void
+Market::on_trade(const OrderBook* book,
+    liquibook::book::Quantity qty,
     liquibook::book::Cost cost)
 {
     out() << "\tTrade: " << qty <<  ' ' << book->symbol() << " Cost "  << cost  << std::endl;
@@ -723,38 +181,10 @@
 /////////////////////////////////////////
 // Implement OrderBookListener interface
 
-void 
+void
 Market::on_order_book_change(const OrderBook* book)
 {
     out() << "\tBook Change: " << ' ' << book->symbol() << std::endl;
 }
 
-
-
-/////////////////////////////////////////
-// Implement BboListener interface
-void 
-Market::on_bbo_change(const DepthOrderBook * book, const BookDepth * depth)
-{
-    out() << "\tBBO Change: " << ' ' << book->symbol() 
-        << (depth->changed() ? " Changed" : " Unchanged")
-        << " Change Id: " << depth->last_change()
-        << " Published: " << depth->last_published_change()
-        << std::endl;
-
-}
-
-/////////////////////////////////////////
-// Implement DepthListener interface
-void 
-Market::on_depth_change(const DepthOrderBook * book, const BookDepth * depth)
-{
-    out() << "\tDepth Change: " << ' ' << book->symbol();
-    out() << (depth->changed() ? " Changed" : " Unchanged")
-        << " Change Id: " << depth->last_change()
-        << " Published: " << depth->last_published_change();
-    publishDepth(out(), *depth);
-    out() << std::endl;
-}
-
 }  // namespace orderentry
diff -ur a/market/Market.h b/market/Market.h
--- a/market/Market.h	2020-09-01 13:23:32.965966163 +0200
+++ b/market/Market.h	2020-09-01 13:24:07.982354086 +0200
@@ -3,7 +3,7 @@
 // See the file license.txt for licensing information.
 #pragma once
 
-#include <book/depth_order_book.h>
+#include "../book/depth_order_book.h"
 
 #include "Order.h"
 
@@ -13,36 +13,28 @@
 #include <algorithm>
 #include <map>
 #include <memory>
+#include <queue>
 
 namespace orderentry
 {
 typedef liquibook::book::OrderBook<OrderPtr> OrderBook;
 typedef std::shared_ptr<OrderBook> OrderBookPtr;
-typedef liquibook::book::DepthOrderBook<OrderPtr> DepthOrderBook;
-typedef std::shared_ptr<DepthOrderBook> DepthOrderBookPtr;
-typedef liquibook::book::Depth<> BookDepth;
+typedef std::pair<OrderBookPtr, std::string> NamedOrderBook;
 
-class Market 
+class Market
     : public liquibook::book::OrderListener<OrderPtr>
     , public liquibook::book::TradeListener<OrderBook>
     , public liquibook::book::OrderBookListener<OrderBook>
-    , public liquibook::book::BboListener<DepthOrderBook>
-    , public liquibook::book::DepthListener<DepthOrderBook>
 {
-    typedef std::map<std::string, OrderPtr> OrderMap;
     typedef std::map<std::string, OrderBookPtr> SymbolToBookMap;
 public:
     Market(std::ostream * logFile = &std::cout);
     ~Market();
 
-    /// @brief What to display to user when requesting input
-    static const char * prompt();
+    NamedOrderBook createBook(std::string const &symbol);
+    bool placeOrder(NamedOrderBook &namedOrderBook, std::queue<FilledOrder> &notifier, uint64_t req_id, bool buy_otherwise_sell, liquibook::book::Quantity qty, liquibook::book::Price price);
 
-    /// @brief Help for user's input
-    static void help(std::ostream & out = std::cout);
-
-    /// @brief Apply a user command that has been parsed into tokens.
-    bool apply(const std::vector<std::string> & tokens);
+    void demo();
 
 public:
     /////////////////////////////////////
@@ -59,9 +51,9 @@
     /// @param matched_order the matched order
     /// @param fill_qty the quantity of this fill
     /// @param fill_cost the cost of this fill (qty * price)
-    virtual void on_fill(const OrderPtr& order, 
-        const OrderPtr& matched_order, 
-        liquibook::book::Quantity fill_qty, 
+    virtual void on_fill(const OrderPtr& order,
+        const OrderPtr& matched_order,
+        liquibook::book::Quantity fill_qty,
         liquibook::book::Cost fill_cost);
 
     /// @brief callback for an order cancellation
@@ -74,8 +66,8 @@
     /// @param order the replaced order
     /// @param size_delta the change to order quantity
     /// @param new_price the updated order price
-    virtual void on_replace(const OrderPtr& order, 
-        const int32_t& size_delta, 
+    virtual void on_replace(const OrderPtr& order,
+        const int32_t& size_delta,
         liquibook::book::Price new_price);
 
     /// @brief callback for an order replace rejection
@@ -89,8 +81,8 @@
     ///      or after fill)
     /// @param qty the quantity of this fill
     /// @param cost the cost of this fill (qty * price)
-    virtual void on_trade(const OrderBook* book, 
-        liquibook::book::Quantity qty, 
+    virtual void on_trade(const OrderBook* book,
+        liquibook::book::Quantity qty,
         liquibook::book::Cost cost);
 
     /////////////////////////////////////////
@@ -99,31 +91,14 @@
     /// @brief callback for change anywhere in order book
     virtual void on_order_book_change(const OrderBook* book);
 
-    /////////////////////////////////////////
-    // Implement BboListener interface
-    void on_bbo_change(const DepthOrderBook * book, const BookDepth * depth);
-
-    /////////////////////////////////////////
-    // Implement DepthListener interface
-    void on_depth_change(const DepthOrderBook * book, const BookDepth * depth);
-
 private:
-    ////////////////////////////////////
-    // Command implementatiokns
-    bool doAdd(const std::string & side, const std::vector<std::string> & tokens, size_t pos);
-    bool doCancel(const std::vector<std::string> & tokens, size_t position);
-    bool doModify(const std::vector<std::string> & tokens, size_t position);
-    bool doDisplay(const std::vector<std::string> & tokens, size_t position);
-
     ////////////////////////
     // Order book interactions
     bool symbolIsDefined(const std::string & symbol);
     OrderBookPtr findBook(const std::string & symbol);
-    OrderBookPtr addBook(const std::string & symbol, bool useDepthBook);
-    bool findExistingOrder(const std::vector<std::string> & tokens, size_t & position, OrderPtr & order, OrderBookPtr & book);
-    bool findExistingOrder(const std::string & orderId, OrderPtr & order, OrderBookPtr & book);
+    OrderBookPtr addBook(const std::string & symbol);
 
-    std::ostream & out() 
+    std::ostream & out()
     {
         return *logFile_;
     }
@@ -132,7 +107,6 @@
 
     std::ostream * logFile_;
 
-    OrderMap orders_;
     SymbolToBookMap books_;
 
 };
diff -ur a/market/Order.cpp b/market/Order.cpp
--- a/market/Order.cpp	2020-09-01 13:23:32.965966163 +0200
+++ b/market/Order.cpp	2020-09-01 13:24:07.982354086 +0200
@@ -8,21 +8,25 @@
 {
 
 Order::Order(const std::string & id,
+    std::queue<FilledOrder> &notifier,
+    uint64_t req_id,
     bool buy_side,
     liquibook::book::Quantity quantity,
-    std::string symbol,
+    std::string &symbol,
     liquibook::book::Price price,
     liquibook::book::Price stopPrice,
     bool aon,
     bool ioc)
     : id_(id)
+    , notifier_(notifier)
+    , req_id_(req_id)
     , buy_side_(buy_side)
     , symbol_(symbol)
     , quantity_(quantity)
     , price_(price)
     , stopPrice_(stopPrice)
-    , ioc_(ioc)
     , aon_(aon)
+    , ioc_(ioc)
     , quantityFilled_(0)
     , quantityOnMarket_(0)
     , fillCost_(0)
@@ -31,94 +35,103 @@
 {
 }
 
-std::string 
+std::string
 Order::order_id() const
 {
     return id_;
 }
 
-bool 
+std::queue<FilledOrder> &Order::notifier() {
+    return notifier_;
+}
+
+bool
 Order::is_limit() const
 {
     return price() != 0;
 }
 
-bool 
+uint64_t
+Order::req_id() const {
+    return req_id_;
+}
+
+bool
 Order::is_buy() const
 {
     return buy_side_;
 }
 
-bool 
+bool
 Order::all_or_none() const
 {
     return aon_;
 }
 
-bool 
+bool
 Order::immediate_or_cancel() const
 {
     return ioc_;
 }
 
-std::string 
+std::string&
 Order::symbol() const
 {
    return symbol_;
 }
 
-liquibook::book::Price 
+liquibook::book::Price
 Order::price() const
 {
     return price_;
 }
 
-liquibook::book::Quantity 
+liquibook::book::Quantity
 Order::order_qty() const
 {
     return quantity_;
 }
 
 
-liquibook::book::Price 
+liquibook::book::Price
 Order::stop_price() const
 {
     return stopPrice_;
 }
 
-uint32_t 
+uint32_t
 Order::quantityOnMarket() const
 {
     return quantityOnMarket_;
 }
 
-uint32_t 
+uint32_t
 Order::quantityFilled() const
 {
     return quantityFilled_;
 }
 
-uint32_t 
+uint32_t
 Order::fillCost() const
 {
     return fillCost_;
 }
 
 
-const Order::History & 
+const Order::History &
 Order::history() const
 {
     return history_;
 }
 
-const Order::StateChange & 
+const Order::StateChange &
 Order::currentState() const
 {
     return history_.back();
 }
 
 
-Order & 
+Order &
 Order::verbose(bool verbose)
 {
     verbose_ = verbose;
@@ -131,7 +144,7 @@
     return verbose_;
 }
 
-void 
+void
 Order::onSubmitted()
 {
     std::stringstream msg;
@@ -147,22 +160,22 @@
     history_.emplace_back(Submitted, msg.str());
 }
 
-void 
+void
 Order::onAccepted()
 {
     quantityOnMarket_ = quantity_;
     history_.emplace_back(Accepted);
 }
 
-void 
+void
 Order::onRejected(const char * reason)
 {
     history_.emplace_back(Rejected, reason);
 }
 
-void 
+void
 Order::onFilled(
-    liquibook::book::Quantity fill_qty, 
+    liquibook::book::Quantity fill_qty,
     liquibook::book::Cost fill_cost)
 {
     quantityOnMarket_ -= fill_qty;
@@ -173,28 +186,28 @@
     history_.emplace_back(Filled, msg.str());
 }
 
-void 
+void
 Order::onCancelRequested()
 {
     history_.emplace_back(CancelRequested);
 }
 
-void 
+void
 Order::onCancelled()
 {
     quantityOnMarket_ = 0;
     history_.emplace_back(Cancelled);
 }
 
-void 
+void
 Order::onCancelRejected(const char * reason)
 {
     history_.emplace_back(CancelRejected, reason);
 }
 
-void 
+void
 Order::onReplaceRequested(
-    const int32_t& size_delta, 
+    const int32_t& size_delta,
     liquibook::book::Price new_price)
 {
     std::stringstream msg;
@@ -209,8 +222,8 @@
     history_.emplace_back(ModifyRequested, msg.str());
 }
 
-void 
-Order::onReplaced(const int32_t& size_delta, 
+void
+Order::onReplaced(const int32_t& size_delta,
     liquibook::book::Price new_price)
 {
     std::stringstream msg;
@@ -228,7 +241,7 @@
     history_.emplace_back(Modified, msg.str());
 }
 
-void 
+void
 Order::onReplaceRejected(const char * reason)
 {
     history_.emplace_back(ModifyRejected, reason);
@@ -242,8 +255,8 @@
     case Order::Submitted:
         out << "Submitted ";
         break;
-    case Order::Rejected: 
-        out << "Rejected "; 
+    case Order::Rejected:
+        out << "Rejected ";
         break;
     case Order::Accepted:
         out << "Accepted ";
@@ -260,8 +273,8 @@
     case Order::PartialFilled:
         out << "PartialFilled ";
         break;
-    case Order::Filled: 
-        out << "Filled "; 
+    case Order::Filled:
+        out << "Filled ";
         break;
     case Order::CancelRequested:
         out << "CancelRequested ";
@@ -269,8 +282,8 @@
     case Order::CancelRejected:
         out << "CancelRejected ";
         break;
-    case Order::Cancelled: 
-        out << "Cancelled "; 
+    case Order::Cancelled:
+        out << "Cancelled ";
         break;
     case Order::Unknown:
         out << "Unknown ";
@@ -283,7 +296,7 @@
 
 std::ostream & operator << (std::ostream & out, const Order & order)
 {
-    out << "[#" << order.order_id(); 
+    out << "[#" << order.order_id();
     out << ' ' << (order.is_buy() ? "BUY" : "SELL");
     out << ' ' << order.order_qty();
     out << ' ' << order.symbol();
@@ -328,7 +341,7 @@
         for(auto event = history.begin(); event != history.end(); ++event)
         {
             out << "\n\t" << *event;
-        } 
+        }
     }
     else
     {
@@ -336,7 +349,7 @@
     }
 
    out << ']';
-   
+
    return out;
 }
 
diff -ur a/market/Order.h b/market/Order.h
--- a/market/Order.h	2020-09-01 13:23:32.965966163 +0200
+++ b/market/Order.h	2020-09-01 13:24:07.982354086 +0200
@@ -4,14 +4,24 @@
 #pragma once
 
 #include "OrderFwd.h"
-#include <book/types.h>
+#include "../book/types.h"
 
 #include <string>
 #include <vector>
+#include <queue>
 
 namespace orderentry
 {
 
+struct FilledOrder {
+    FilledOrder(OrderPtr const &order, liquibook::book::Quantity fill_qty, liquibook::book::Cost fill_cost)
+        : order(order), fill_qty(fill_qty), fill_cost(fill_cost) {}
+
+    OrderPtr order;
+    liquibook::book::Quantity fill_qty;
+    liquibook::book::Cost fill_cost;
+};
+
 class Order
 {
 public:
@@ -42,23 +52,27 @@
             : state_(state)
             , description_(description)
         {}
-    };    
+    };
     typedef std::vector<StateChange> History;
 public:
     Order(const std::string & id,
+        std::queue<FilledOrder> &notifier,
+        uint64_t req_id,
         bool buy_side,
         liquibook::book::Quantity quantity,
-        std::string symbol,
+        std::string &symbol,
         liquibook::book::Price price,
         liquibook::book::Price stopPrice,
         bool aon,
         bool ioc);
 
     //////////////////////////
-    // Implement the 
+    // Implement the
     // liquibook::book::order
     // concept.
 
+    uint64_t req_id() const;
+
     /// @brief is this a limit order?
     bool is_limit() const;
 
@@ -84,10 +98,12 @@
     /// orders already on the market, cancel any remaining quantity.
     virtual bool immediate_or_cancel() const;
 
-    std::string symbol() const;
+    std::string &symbol() const;
 
     std::string order_id() const;
 
+    std::queue<FilledOrder> &notifier();
+
     uint32_t quantityFilled() const;
 
     uint32_t quantityOnMarket() const;
@@ -106,7 +122,7 @@
     void onRejected(const char * reason);
 
     void onFilled(
-        liquibook::book::Quantity fill_qty, 
+        liquibook::book::Quantity fill_qty,
         liquibook::book::Cost fill_cost);
 
     void onCancelRequested();
@@ -114,18 +130,20 @@
     void onCancelRejected(const char * reason);
 
     void onReplaceRequested(
-        const int32_t& size_delta, 
+        const int32_t& size_delta,
         liquibook::book::Price new_price);
 
-    void onReplaced(const int32_t& size_delta, 
+    void onReplaced(const int32_t& size_delta,
         liquibook::book::Price new_price);
 
     void onReplaceRejected(const char * reaseon);
 
 private:
     std::string id_;
+    std::queue<FilledOrder> &notifier_;
+    uint64_t req_id_;
     bool buy_side_;
-    std::string symbol_;
+    std::string &symbol_;
     liquibook::book::Quantity quantity_;
     liquibook::book::Price price_;
     liquibook::book::Price stopPrice_;
@@ -136,7 +154,7 @@
     liquibook::book::Quantity quantityFilled_;
     int32_t quantityOnMarket_;
     uint32_t fillCost_;
-    
+
     std::vector<StateChange> history_;
     bool verbose_;
 };
